module CPU(
    input clk,                // Reloj del sistema
    input reset,              // Señal de reinicio
    output [31:0] alu_result  // Resultado de la ALU para observar la salida
);
    // Señales internas para interconectar los módulos
    wire [31:0] pc_current;
    wire [31:0] instruction;
    wire [31:0] alu_operand_a;
    wire [31:0] alu_operand_b;
    wire [31:0] alu_out;
    wire [3:0] alu_op;        // Código de operación para la ALU

    // Instancia del Program Counter
    ProgramCounter pc(
        .clk(clk),
        .reset(reset),
        .pc_in(alu_out),       // Suponemos que la ALU puede afectar el PC (saltos, etc.)
        .pc_out(pc_current)
    );

    // Instancia de la Memoria de Programa
    ProgramMemory program_memory(
        .clk(clk),
        .address(pc_current),
        .write_data(32'b0),
        .mem_write(0),
        .mem_read(1),
        .read_data(instruction)
    );

    // Decodificación de la instrucción (asumiendo un formato simple)
    assign alu_operand_a = pc_current;        // Ejemplo: usando el PC como operando
    assign alu_operand_b = instruction[15:0]; // Parte de la instrucción como segundo operando
    assign alu_op = instruction[31:28];       // Código de operación desde la instrucción

    // Instancia de la ALU
    alu alu2(
        .operand_a(alu_operand_a),
        .operand_b(alu_operand_b),
        .operation(alu_op),
        .result(alu_out)
    );

    // Salida de la ALU (para propósitos de visualización)
    assign alu_result = alu_out;

endmodule
